       1                                
       2                                	.title	Serial I/O test for console
       3                                
       4                                	; This program tests the DEC DL11 or Robotron AIS K8060 console interface.
       5                                	; It run in 4 phases:
       6                                    ; 1. print a start message,
       7                                    ; 2. echoes chars typed to the output until ^C is hit
       8                                	; 3. prints an end message and HALTs.
       9                                	; 4. on CONT it repeats.
      10                                	;
      11                                	; Contact: Joerg Hoppe / j_hoppe@t-online.de / www.retromcp.com
      12                                
      13                                	.asect
      14                                
      15                                	; select one type of console at assembly time
      16 000001                         DL11	=	1
      17 000000                         K8060	=	0
      18                                
      19                                
      20 001000                         	.=1000
      21                                
      22 000776                         stack	=	. - 2		; stack growns down from start
      23                                
      24                                start:
      25 001000 012706  000776          	mov	#stack,sp	; init stack
      26                                
      27                                	; 1. print "Hello" msg
      28 001004 012701  001126          	mov	#shello,r1
      29 001010 004737  001054          	call	@#puts
      30                                
      31                                	; 2. echo chars until ^C hit
      32                                1$:
      33 001014 004737  001110          	call	@#getc		; wait for char, return in r0
      34 001020 042700  177600          	bic	#177600,r0	; make 7bit: clear bits <15:7>
      35 001024 120027  000003          	cmpb	r0,#3		; break by ^C ?
      36 001030 001403                  	beq	2$		; yes: leave loop
      37 001032 004737  001070          	call	@#putc		; no: echo char in r0 and loop
      38 001036 000766                  	br	1$
      39                                
      40                                2$:
      41                                
      42                                	; 3. print "Bye bye" msg and HALT
      43 001040 012701  001211          	mov	#sbye,r1
      44 001044 004737  001054          	call	@#puts
      45 001050 000000                  	halt
      46                                
      47                                	; 4. loop on CONT
      48 001052 000752                  	br	start
      49                                
      50                                
      51                                	; ----------------------
      52                                	; puts - print a string
      53                                	; r1 = pointer, r0,r1 changed
      54                                puts:
      55 001054 112100                  	movb	(r1)+,r0	; load xmt char
      56 001056 001403                  	beq	1$		; string ends with 0
      57 001060 004737  001070          	call	@#putc
      58 001064 000773                  	br	puts		; transmit nxt char of string
      59 001066 000207                  1$:	return
      60                                
      61                                
      62 000001                         .IF NE DL11			; assemble this if symbol DL11 > 0
      63                                	; code block for DEC DL11 console I/O
      64                                	; dladr = 177560      ; base addr of DEC DL11 console
      65 176500                         	dladr = 176500	 ; DL11 #0
      66                                	; dladr = 176510   ; DL11 #1
      67                                	; dladr = 176520   ; DL11 #2
      68                                
      69                                	; ----------------------
      70                                	; putc - output a single char
      71                                	; r0 = char, r4 changed
      72                                putc:
      73 001070 012704  176500          	mov	#dladr,r4	; set base addr
      74 001074 110064  000006          	movb	r0,6(r4)	; char into transmit buffer
      75 001100 105764  000004          1$:	tstb	4(r4)		; XMT RDY?
      76 001104 100375                  	bpl	1$		; no, loop
      77 001106 000207                  	return
      78                                
      79                                	; ----------------------
      80                                	; getc - input a single char
      81                                	; result in r0, r4 changed
      82                                getc:
      83 001110 012704  176500          	mov	#dladr,r4	; set base addr
      84 001114 105714                  1$:	tstb	(r4)		; RCVR DONE?
      85 001116 100376                  	bpl	1$		; no, loop
      86 001120 016400  000002          	mov	2(r4),r0	; return data
      87 001124 000207                  	return
      88                                .ENDC
      89                                
      90                                
      91 000000                         .IF NE K8060			; assemble this if symbol K8060 > 0
      92                                	; code block for Robotron AIS K8060 console I/O
      93                                	; It is assumed that the serial interface is already
      94                                	; initialized by boot code, so
      95                                	; - registers are enabled in I/O space.
      96                                	; - mode is asyncronous
      97                                	; - baudrate is valid
      98                                	; - format is 8N1 or so
      99                                	aisadr	  = 177500	; base addr of AIS channel 1A
     100                                dpr	=	0		; channel 1A read/write data port offset
     101                                sr	=	2		; channel 1A control/address port offset (write)
     102                                lr	=	2		; channel 1A status port offset (read)
     103                                
     104                                	; ----------------------
     105                                	; putc - output a single char
     106                                	; r0 = char, r4 changed
     107                                putc:
     108                                	mov	#aisadr,r4	; set base addr
     109                                	; assume no pending address select in SR0, so LR0 is accessed
     110                                	movb	r0,dpr(r4)	; write char into "1A Schreibdatenregister"
     111                                1$:	bit	#4,lr(r4)	; LR0.D2: xmt buffer emtpy?
     112                                	beq	1$		; no, loop
     113                                	return
     114                                
     115                                	; ----------------------
     116                                	; getc - input a single char
     117                                	; result in r0, r4 changed
     118                                getc:
     119                                	mov	#aisadr,r4	; set base addr
     120                                	; assume no pending address select in SR0, so LR0 is accessed
     121                                1$:	bit	#1,lr(r4)	; LR0.D0: char received?
     122                                	beq	1$		; no, loop
     123                                	mov	dpr(r4),r0	; read char from "1A Lesedatenregister"
     124                                	return
     125                                .ENDC
     126                                
     127                                
     128                                shello:
     129 001126    110     145     154  	.ascii	/Hello, World!/
         001131    154     157     054  
         001134    040     127     157  
         001137    162     154     144  
         001142    041                  
     130 001143    015     012          	.byte	15,12		; CR, LF,
     131 001145    124     171     160  	.ascii	/Typed chars are echoed, ^C HALTs./
         001150    145     144     040  
         001153    143     150     141  
         001156    162     163     040  
         001161    141     162     145  
         001164    040     145     143  
         001167    150     157     145  
         001172    144     054     040  
         001175    136     103     040  
         001200    110     101     114  
         001203    124     163     056  
     132 001206    015     012     000  	.byte	15,12,0 	; CR, LF, NUL=end marker
     133                                sbye:
     134 001211    015     012          	.byte	15,12
     135 001213    107     157     157  	.ascii	/Good bye!/
         001216    144     040     142  
         001221    171     145     041  
     136 001224    015     012     000  	.byte	15,12,0 	; CR, LF, NUL=end marker
     137                                
     138                                	.end
     138                                
